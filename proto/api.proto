syntax = "proto3";

package watch;

enum Status {
    UNKNOWN = 0;
    STARTED = 1;
    RUNNING = 2;
}

enum ETEnum {
    ALERT_0 = 0;
    ALERT_1 = 1;
    ALERT_2 = 2;
    ALERT_3 = 3;
    ALERT_4 = 4;
    ALERT_5 = 5;
    ALERT_6 = 6;
    ALERT_7 = 7;
    ALERT_8 = 8;
    ALERT_9 = 9;
    PAGE = 10;
    AUDIO = 11;
}

message Node {
    int64 id = 1;
    Status status = 2;

    map<int64, string> metadata = 3;
}

// Device is a machine identified as an IoT device
// that is used to handle and emit events to other IoT devices
message Device {
   int64 id = 1;
   Status status = 2;

   map<int64, string> metadata = 3;
}

// Event is a representation of a object that must be handled
// by the server. As it may be a running process, it has an associated Status.
message Event {
    int64 id = 1;
    Status status = 2;

    map<int64, string> metadata = 3;

    EventType eventType = 4;
    bytes data = 5;
}

// EventType identifies the source of the event, allowing for
// third party events. EventType handles alerts as their inherently
// events, so we keep track of those, unlike pagers
message EventType {
    bool isAlert = 1;
    ETEnum eventType = 2;
}

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  ServingStatus status = 1;
}

// Generic healthcheck for nodes
service Health {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}

// Watch is responsible for handling and normalizing
// an external event POSTing to the agent
service Watcher {
    rpc Watch(stream WatchRequest) returns (stream WatchResponse);
}

message WatchRequest {
    string id = 1;
}

message WatchResponse {
    string id = 1;
}

// Emit provides a alerting service in case
// of certain events occuring
service Emiter {
    rpc Alert(AlertRequest) returns (AlertResponse);
}

message AlertRequest {
    string id = 1;
    // Event data for an alert
    bytes data = 2;
}

message AlertResponse {
    string id = 1;
}
// Pager is a less urgent representation of an emiter
service Pager {
    rpc Notify(NotifyRequest) returns (NotifyResponse);
}

message NotifyRequest {
    string id = 1;
    // Event data for a notification
    bytes data = 2;
}

message NotifyResponse {
    string id = 1;
}
